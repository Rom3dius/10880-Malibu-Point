{"ast":null,"code":"var _jsxFileName = \"/home/romedius/Documents/Programming/AshTerm/src/components/Term.js\",\n    _s = $RefreshSig$();\n\nimport Terminal from 'react-console-emulator';\nimport commands from '../components/Commands/commands.js';\nimport React from 'react';\nimport figlet from 'figlet';\nimport getcat from '../utils/cat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Term() {\n  _s();\n\n  const cmds = commands.commands;\n  const owrs = commands.overwrites;\n  const terminal = /*#__PURE__*/React.createRef();\n  const [prompt, setPrompt] = React.useState('anon@romedius:~$ ');\n  const [home, sethome] = React.useState('ashterm');\n  const [dir, setdir] = React.useState({\n    'ashterm': []\n  });\n  return /*#__PURE__*/_jsxDEV(Terminal, {\n    ref: terminal,\n    welcomeMessage: \"⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⢄⢄⠢⡠⡀⢀⠄⡀⡀⠄⠄⠄⠄⠐⠡⠄⠉⠻⣻⣟⣿⣿⣄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢠⢣⠣⡎⡪⢂⠊⡜⣔⠰⡐⠠⠄⡾⠄⠈⠠⡁⡂⠄⠔⠸⣻⣿⣿⣯⢂⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⡀⠄⠄⠄⠄⠄⠄⠄⠐⢰⡱⣝⢕⡇⡪⢂⢊⢪⢎⢗⠕⢕⢠⣻⠄⠄⠄⠂⠢⠌⡀⠄⠨⢚⢿⣿⣧⢄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⡐⡈⠌⠄⠄⠄⠄⠄⠄⠄⡧⣟⢼⣕⢝⢬⠨⡪⡚⡺⡸⡌⡆⠜⣾⠄⠄⠄⠁⡐⠠⣐⠨⠄⠁⠹⡹⡻⣷⡕⢄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⢄⠇⠂⠄⠄⠄⠄⠄⠄⠄⢸⣻⣕⢗⠵⣍⣖⣕⡼⡼⣕⢭⢮⡆⠱⣽⡇⠄⠄⠂⠁⠄⢁⠢⡁⠄⠄⠐⠈⠺⢽⣳⣄⠄⠄\\n⠄⠄⠄⠄⠄⢔⢕⢌⠄⠄⠄⠄⠄⢀⠄⠄⣾⢯⢳⠹⠪⡺⡺⣚⢜⣽⣮⣳⡻⡇⡙⣜⡇⠄⠄⢸⠄⠄⠂⡀⢠⠂⠄⢶⠊⢉⡁⠨⡒⠄⠄\\n⠄⠄⠄⠄⡨⣪⣿⢰⠈⠄⠄⠄⡀⠄⠄⠄⣽⣵⢿⣸⢵⣫⣳⢅⠕⡗⣝⣼⣺⠇⡘⡲⠇⠄⠄⠨⠄⠐⢀⠐⠐⠡⢰⠁⠄⣴⣾⣷⣮⣇⠄\\n⠄⠄⠄⠄⡮⣷⣿⠪⠄⠄⠄⠠⠄⠂⠠⠄⡿⡞⡇⡟⣺⣺⢷⣿⣱⢕⢵⢺⢼⡁⠪⣘⡇⠄⠄⢨⠄⠐⠄⠄⢀⠄⢸⠄⠄⣿⣿⣿⣿⣿⡆\\n⠄⠄⠄⢸⣺⣿⣿⣇⠄⠄⠄⠄⢀⣤⣖⢯⣻⡑⢕⢭⢷⣻⣽⡾⣮⡳⡵⣕⣗⡇⠡⡣⣃⠄⠄⠸⠄⠄⠄⠄⠄⠄⠈⠄⠄⢻⣿⣿⣵⡿⣹\\n⠄⠄⠄⢸⣿⣿⣟⣯⢄⢤⢲⣺⣻⣻⡺⡕⡔⡊⡎⡮⣿⣿⣽⡿⣿⣻⣼⣼⣺⡇⡀⢎⢨⢐⢄⡀⠄⢁⠠⠄⠄⠐⠄⠣⠄⠸⣿⣿⣯⣷⣿\\n⠄⠄⠄⢸⣿⣿⣿⢽⠲⡑⢕⢵⢱⢪⡳⣕⢇⢕⡕⣟⣽⣽⣿⣿⣿⣿⣿⣿⣿⢗⢜⢜⢬⡳⣝⢸⣢⢀⠄⠄⠐⢀⠄⡀⠆⠄⠸⣿⣿⣿⣿\\n⠄⠄⠄⢸⣿⣿⣿⢽⣝⢎⡪⡰⡢⡱⡝⡮⡪⡣⣫⢎⣿⣿⣿⣿⣿⣿⠟⠋⠄⢄⠄⠈⠑⠑⠭⡪⡪⢏⠗⡦⡀⠐⠄⠄⠈⠄⠄⠙⣿⣿⣿\\n⠄⠄⠄⠘⣿⣿⣿⣿⡲⣝⢮⢪⢊⢎⢪⢺⠪⣝⢮⣯⢯⣟⡯⠷⠋⢀⣠⣶⣾⡿⠿⢀⣴⣖⢅⠪⠘⡌⡎⢍⣻⠠⠅⠄⠄⠈⠢⠄⠄⠙⠿\\n⠄⠄⠄⠄⣿⣿⣿⣿⣽⢺⢍⢎⢎⢪⡪⡮⣪⣿⣞⡟⠛⠋⢁⣠⣶⣿⡿⠛⠋⢀⣤⢾⢿⣕⢇⠡⢁⢑⠪⡳⡏⠄⠄⠄⠄⠄⠄⢑⠤⢀⢠\\n⠄⠄⠄⠄⢸⣿⣿⣿⣟⣮⡳⣭⢪⡣⡯⡮⠗⠋⠁⠄⠄⠈⠿⠟⠋⣁⣀⣴⣾⣿⣗⡯⡳⡕⡕⡕⡡⢂⠊⢮⠃⠄⠄⠄⠄⠄⢀⠐⠨⢁⠨\\n⠄⠄⠄⠄⠈⢿⣿⣿⣿⠷⠯⠽⠐⠁⠁⢀⡀⣤⢖⣽⢿⣦⣶⣾⣿⣿⣿⣿⣿⣿⢎⠇⡪⣸⡪⡮⠊⠄⠌⠎⡄⠄⠄⠄⠄⠄⠄⡂⢁⠉⡀\\n⠄⠄⠄⠄⠄⠈⠛⠚⠒⠵⣶⣶⣶⣶⢪⢃⢇⠏⡳⡕⣝⢽⡽⣻⣿⣿⣿⣿⡿⣺⠰⡱⢜⢮⡟⠁⠄⠄⠅⠅⢂⠐⠄⠐⢀⠄⠄⠄⠂⡁⠂\\n⠄⠄⠄⠄⠄⠄⠄⠰⠄⠐⢒⣠⣿⣟⢖⠅⠆⢝⢸⡪⡗⡅⡯⣻⣺⢯⡷⡯⡏⡇⡅⡏⣯⡟⠄⠄⠄⠨⡊⢔⢁⠠⠄⠄⠄⠄⠄⢀⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠹⣿⣿⣿⣿⢿⢕⢇⢣⢸⢐⢇⢯⢪⢪⠢⡣⠣⢱⢑⢑⠰⡸⡸⡇⠁⠄⠄⠠⡱⠨⢘⠄⠂⡀⠂⠄⠄⠄⠄⠈⠂⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⢻⣿⣿⣿⣟⣝⢔⢅⠸⡘⢌⠮⡨⡪⠨⡂⠅⡑⡠⢂⢇⢇⢿⠁⠄⢀⠠⠨⡘⢌⡐⡈⠄⠄⠠⠄⠄⠄⠄⠄⠄⠁\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠹⣿⣿⣿⣯⢢⢊⢌⢂⠢⠑⠔⢌⡂⢎⠔⢔⢌⠎⡎⡮⡃⢀⠐⡐⠨⡐⠌⠄⡑⠄⢂⠐⢀⠄⠄⠈⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⣿⣿⣿⣯⠂⡀⠔⢔⠡⡹⠰⡑⡅⡕⡱⠰⡑⡜⣜⡅⡢⡈⡢⡑⡢⠁⠰⠄⠨⢀⠐⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠻⢿⣿⣷⣢⢱⠡⡊⢌⠌⡪⢨⢘⠜⡌⢆⢕⢢⢇⢆⢪⢢⡑⡅⢁⡖⡄⠄⠄⠄⢀⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠛⢿⣿⣵⡝⣜⢐⠕⢌⠢⡑⢌⠌⠆⠅⠑⠑⠑⠝⢜⠌⠠⢯⡚⡜⢕⢄⠄⠁⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⢿⣷⡣⣇⠃⠅⠁⠈⡠⡠⡔⠜⠜⣿⣗⡖⡦⣰⢹⢸⢸⢸⡘⠌⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠋⢍⣠⡤⡆⣎⢇⣇⢧⡳⡍⡆⢿⣯⢯⣞⡮⣗⣝⢎⠇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠁⣿⣿⣎⢦⠣⠳⠑⠓⠑⠃⠩⠉⠈⠈⠉⠄⠁⠉⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⡿⡞⠁⠄⠄⢀⠐⢐⠠⠈⡌⠌⠂⡁⠌⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⢂⢂⢀⠡⠄⣈⠠⢄⠡⠒⠈⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠢⠠⠊⠨⠐⠈⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\",\n    commands: {\n      clear: {\n        description: 'Clears the terminal',\n        usage: 'clear',\n        fn: () => {\n          terminal.current.clearStdout();\n        }\n      },\n      getcat: {\n        description: 'Get a random cute cat~',\n        usage: 'get-cat',\n        fn: async () => {\n          const url = await getcat();\n          terminal.current.pushToStdout(\"getting a cute cat for you..\\n---\\n\");\n          terminal.current.pushToStdout( /*#__PURE__*/_jsxDEV(\"img\", {\n            src: url,\n            width: \"500px\",\n            height: \"380px\",\n            alt: \"cat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 55\n          }, this));\n        }\n      },\n      art: {\n        description: 'Get ASCII art',\n        usage: 'art',\n        fn: () => {\n          terminal.current.pushToStdout(welcomeMessage);\n        }\n      },\n      cd: {\n        description: 'Change directory, not really, lol!',\n        usage: 'cd <directory>',\n        fn: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          if (args.length === 1 && args[0] === '..') {\n            if (prompt === 'anon@romedius:~$ ') {\n              return 'cannot go up';\n            } else {\n              setPrompt(prompt.substring(0, prompt.lastIndexOf('/')) + \":~$ \");\n              sethome(prompt.substring(prompt.lastIndexOf('/', prompt.lastIndexOf('/') - 1) + 1, prompt.lastIndexOf('/'))); //console.log(prompt.substring(prompt.lastIndexOf('/', prompt.lastIndexOf('/')-1)+1, prompt.lastIndexOf('/')))\n              //console.log(prompt.lastIndexOf('/', prompt.lastIndexOf('/')-1))\n              //console.log(prompt.lastIndexOf('/'))\n\n              return 'changed directory';\n            }\n          } else {\n            if (dir[home].includes(args[0])) {\n              setPrompt(`${prompt.slice(0, -4) + \"/\" + args.join('/') + \":~$ \"}`);\n              sethome(args.join('/')); //console.log(prompt.slice(0, -4)+ \"/\" + args.join('/'))\n\n              return 'changed directory';\n            } else {\n              return 'cannot find directory';\n            }\n          }\n        }\n      },\n      ls: {\n        description: 'List files in the current directory',\n        usage: 'ls',\n        fn: () => {\n          if (dir[home].length === 0) {\n            return 'nothing here :(\\nUse mkdir to create a dir inside this one.';\n          } else {\n            return dir[home].join('\\n');\n          }\n        }\n      },\n      mkdir: {\n        description: 'Make a directory',\n        usage: 'mkdir <directory>',\n        fn: function () {\n          if (arguments.length === 1) {\n            setdir({ ...dir,\n              [home]: [...dir[home], arguments.length <= 0 ? undefined : arguments[0]],\n              [arguments.length <= 0 ? undefined : arguments[0]]: []\n            }); //console.log(dir)\n\n            return `created directory ${arguments.length <= 0 ? undefined : arguments[0]}.`;\n          } else {\n            return 'invalid arguments';\n          }\n        }\n      },\n      help: {\n        description: 'List all available commands',\n        usage: 'help',\n        fn: () => {\n          return `\n                            ${Object.keys(owrs).map(cmd => `${cmd}${\" \".repeat(12 - cmd.length)} | ${owrs[cmd].description}${\" \".repeat(39 - owrs[cmd].description.length)} | ${owrs[cmd].usage}`).join('\\n')}\n                            ${Object.keys(cmds).map(cmd => `${cmd}${\" \".repeat(12 - cmd.length)} | ${cmds[cmd].description}${\" \".repeat(39 - cmds[cmd].description.length)} | ${cmds[cmd].usage}`).join('\\n')}\n                        `;\n        }\n      },\n      ...cmds\n    },\n    promptLabel: prompt,\n    autoFocus: true,\n    style: {\n      backgroundColor: null,\n      minHeight: null,\n      maxHeight: null,\n      overflow: 'auto',\n      height: '100%',\n      width: '100%'\n    },\n    styleEchoBack: \"fullInherit\",\n    contentStyle: {\n      color: '#ffb86c',\n      fontWeight: 'normal',\n      paddingLeft: null\n    } // Text colour\n    ,\n    promptLabelStyle: {\n      color: '#ff5555',\n      fontWeight: 'normal'\n    } // Prompt label colour\n    ,\n    inputTextStyle: {\n      color: '#f1fa8c',\n      fontWeight: 'normal'\n    },\n    messageStyle: {\n      color: '#8be9fd',\n      fontWeight: 'normal',\n      paddingLeft: null\n    },\n    scrollBehavior: \"auto\",\n    noDefaults: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Term, \"i4hOStOb2rGuJ8tsp0O6/rnSi9s=\");\n\n_c = Term;\n\nvar _c;\n\n$RefreshReg$(_c, \"Term\");","map":{"version":3,"sources":["/home/romedius/Documents/Programming/AshTerm/src/components/Term.js"],"names":["Terminal","commands","React","figlet","getcat","Term","cmds","owrs","overwrites","terminal","createRef","prompt","setPrompt","useState","home","sethome","dir","setdir","clear","description","usage","fn","current","clearStdout","url","pushToStdout","art","welcomeMessage","cd","args","length","substring","lastIndexOf","includes","slice","join","ls","mkdir","help","Object","keys","map","cmd","repeat","backgroundColor","minHeight","maxHeight","overflow","height","width","color","fontWeight","paddingLeft"],"mappings":"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","sourcesContent":["import Terminal from 'react-console-emulator'\nimport commands from '../components/Commands/commands.js'\nimport React from 'react'\nimport figlet from 'figlet';\nimport getcat from '../utils/cat'\n\nexport default function Term() {\n    const cmds = commands.commands\n    const owrs = commands.overwrites\n    const terminal = React.createRef()\n    const [prompt, setPrompt] = React.useState('anon@romedius:~$ ')\n    const [home, sethome] = React.useState('ashterm')\n    const [dir, setdir] = React.useState({\n        'ashterm': []\n    })\n    return (\n        <Terminal\n            ref={terminal}\n            welcomeMessage={\"⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⢄⢄⠢⡠⡀⢀⠄⡀⡀⠄⠄⠄⠄⠐⠡⠄⠉⠻⣻⣟⣿⣿⣄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢠⢣⠣⡎⡪⢂⠊⡜⣔⠰⡐⠠⠄⡾⠄⠈⠠⡁⡂⠄⠔⠸⣻⣿⣿⣯⢂⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⡀⠄⠄⠄⠄⠄⠄⠄⠐⢰⡱⣝⢕⡇⡪⢂⢊⢪⢎⢗⠕⢕⢠⣻⠄⠄⠄⠂⠢⠌⡀⠄⠨⢚⢿⣿⣧⢄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⡐⡈⠌⠄⠄⠄⠄⠄⠄⠄⡧⣟⢼⣕⢝⢬⠨⡪⡚⡺⡸⡌⡆⠜⣾⠄⠄⠄⠁⡐⠠⣐⠨⠄⠁⠹⡹⡻⣷⡕⢄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⢄⠇⠂⠄⠄⠄⠄⠄⠄⠄⢸⣻⣕⢗⠵⣍⣖⣕⡼⡼⣕⢭⢮⡆⠱⣽⡇⠄⠄⠂⠁⠄⢁⠢⡁⠄⠄⠐⠈⠺⢽⣳⣄⠄⠄\\n⠄⠄⠄⠄⠄⢔⢕⢌⠄⠄⠄⠄⠄⢀⠄⠄⣾⢯⢳⠹⠪⡺⡺⣚⢜⣽⣮⣳⡻⡇⡙⣜⡇⠄⠄⢸⠄⠄⠂⡀⢠⠂⠄⢶⠊⢉⡁⠨⡒⠄⠄\\n⠄⠄⠄⠄⡨⣪⣿⢰⠈⠄⠄⠄⡀⠄⠄⠄⣽⣵⢿⣸⢵⣫⣳⢅⠕⡗⣝⣼⣺⠇⡘⡲⠇⠄⠄⠨⠄⠐⢀⠐⠐⠡⢰⠁⠄⣴⣾⣷⣮⣇⠄\\n⠄⠄⠄⠄⡮⣷⣿⠪⠄⠄⠄⠠⠄⠂⠠⠄⡿⡞⡇⡟⣺⣺⢷⣿⣱⢕⢵⢺⢼⡁⠪⣘⡇⠄⠄⢨⠄⠐⠄⠄⢀⠄⢸⠄⠄⣿⣿⣿⣿⣿⡆\\n⠄⠄⠄⢸⣺⣿⣿⣇⠄⠄⠄⠄⢀⣤⣖⢯⣻⡑⢕⢭⢷⣻⣽⡾⣮⡳⡵⣕⣗⡇⠡⡣⣃⠄⠄⠸⠄⠄⠄⠄⠄⠄⠈⠄⠄⢻⣿⣿⣵⡿⣹\\n⠄⠄⠄⢸⣿⣿⣟⣯⢄⢤⢲⣺⣻⣻⡺⡕⡔⡊⡎⡮⣿⣿⣽⡿⣿⣻⣼⣼⣺⡇⡀⢎⢨⢐⢄⡀⠄⢁⠠⠄⠄⠐⠄⠣⠄⠸⣿⣿⣯⣷⣿\\n⠄⠄⠄⢸⣿⣿⣿⢽⠲⡑⢕⢵⢱⢪⡳⣕⢇⢕⡕⣟⣽⣽⣿⣿⣿⣿⣿⣿⣿⢗⢜⢜⢬⡳⣝⢸⣢⢀⠄⠄⠐⢀⠄⡀⠆⠄⠸⣿⣿⣿⣿\\n⠄⠄⠄⢸⣿⣿⣿⢽⣝⢎⡪⡰⡢⡱⡝⡮⡪⡣⣫⢎⣿⣿⣿⣿⣿⣿⠟⠋⠄⢄⠄⠈⠑⠑⠭⡪⡪⢏⠗⡦⡀⠐⠄⠄⠈⠄⠄⠙⣿⣿⣿\\n⠄⠄⠄⠘⣿⣿⣿⣿⡲⣝⢮⢪⢊⢎⢪⢺⠪⣝⢮⣯⢯⣟⡯⠷⠋⢀⣠⣶⣾⡿⠿⢀⣴⣖⢅⠪⠘⡌⡎⢍⣻⠠⠅⠄⠄⠈⠢⠄⠄⠙⠿\\n⠄⠄⠄⠄⣿⣿⣿⣿⣽⢺⢍⢎⢎⢪⡪⡮⣪⣿⣞⡟⠛⠋⢁⣠⣶⣿⡿⠛⠋⢀⣤⢾⢿⣕⢇⠡⢁⢑⠪⡳⡏⠄⠄⠄⠄⠄⠄⢑⠤⢀⢠\\n⠄⠄⠄⠄⢸⣿⣿⣿⣟⣮⡳⣭⢪⡣⡯⡮⠗⠋⠁⠄⠄⠈⠿⠟⠋⣁⣀⣴⣾⣿⣗⡯⡳⡕⡕⡕⡡⢂⠊⢮⠃⠄⠄⠄⠄⠄⢀⠐⠨⢁⠨\\n⠄⠄⠄⠄⠈⢿⣿⣿⣿⠷⠯⠽⠐⠁⠁⢀⡀⣤⢖⣽⢿⣦⣶⣾⣿⣿⣿⣿⣿⣿⢎⠇⡪⣸⡪⡮⠊⠄⠌⠎⡄⠄⠄⠄⠄⠄⠄⡂⢁⠉⡀\\n⠄⠄⠄⠄⠄⠈⠛⠚⠒⠵⣶⣶⣶⣶⢪⢃⢇⠏⡳⡕⣝⢽⡽⣻⣿⣿⣿⣿⡿⣺⠰⡱⢜⢮⡟⠁⠄⠄⠅⠅⢂⠐⠄⠐⢀⠄⠄⠄⠂⡁⠂\\n⠄⠄⠄⠄⠄⠄⠄⠰⠄⠐⢒⣠⣿⣟⢖⠅⠆⢝⢸⡪⡗⡅⡯⣻⣺⢯⡷⡯⡏⡇⡅⡏⣯⡟⠄⠄⠄⠨⡊⢔⢁⠠⠄⠄⠄⠄⠄⢀⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠹⣿⣿⣿⣿⢿⢕⢇⢣⢸⢐⢇⢯⢪⢪⠢⡣⠣⢱⢑⢑⠰⡸⡸⡇⠁⠄⠄⠠⡱⠨⢘⠄⠂⡀⠂⠄⠄⠄⠄⠈⠂⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⢻⣿⣿⣿⣟⣝⢔⢅⠸⡘⢌⠮⡨⡪⠨⡂⠅⡑⡠⢂⢇⢇⢿⠁⠄⢀⠠⠨⡘⢌⡐⡈⠄⠄⠠⠄⠄⠄⠄⠄⠄⠁\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠹⣿⣿⣿⣯⢢⢊⢌⢂⠢⠑⠔⢌⡂⢎⠔⢔⢌⠎⡎⡮⡃⢀⠐⡐⠨⡐⠌⠄⡑⠄⢂⠐⢀⠄⠄⠈⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⣿⣿⣿⣯⠂⡀⠔⢔⠡⡹⠰⡑⡅⡕⡱⠰⡑⡜⣜⡅⡢⡈⡢⡑⡢⠁⠰⠄⠨⢀⠐⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠻⢿⣿⣷⣢⢱⠡⡊⢌⠌⡪⢨⢘⠜⡌⢆⢕⢢⢇⢆⢪⢢⡑⡅⢁⡖⡄⠄⠄⠄⢀⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠛⢿⣿⣵⡝⣜⢐⠕⢌⠢⡑⢌⠌⠆⠅⠑⠑⠑⠝⢜⠌⠠⢯⡚⡜⢕⢄⠄⠁⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⢿⣷⡣⣇⠃⠅⠁⠈⡠⡠⡔⠜⠜⣿⣗⡖⡦⣰⢹⢸⢸⢸⡘⠌⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠋⢍⣠⡤⡆⣎⢇⣇⢧⡳⡍⡆⢿⣯⢯⣞⡮⣗⣝⢎⠇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠁⣿⣿⣎⢦⠣⠳⠑⠓⠑⠃⠩⠉⠈⠈⠉⠄⠁⠉⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⡿⡞⠁⠄⠄⢀⠐⢐⠠⠈⡌⠌⠂⡁⠌⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⢂⢂⢀⠡⠄⣈⠠⢄⠡⠒⠈⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠢⠠⠊⠨⠐⠈⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\"}\n            commands={{\n                clear: {\n                    description: 'Clears the terminal',\n                    usage: 'clear',\n                    fn: () => {\n                        terminal.current.clearStdout()\n                    }\n                },\n                getcat: {\n                    description: 'Get a random cute cat~',\n                    usage: 'get-cat',\n                    fn: async () => {\n                        const url = await getcat()\n                        terminal.current.pushToStdout(\"getting a cute cat for you..\\n---\\n\")\n                        terminal.current.pushToStdout(<img src={url} width=\"500px\" height=\"380px\" alt='cat'></img>)\n                    }\n                },\n                art: {\n                    description: 'Get ASCII art',\n                    usage: 'art',\n                    fn: () => {\n                        terminal.current.pushToStdout(welcomeMessage)\n                    }\n                },\n                cd: {\n                    description: 'Change directory, not really, lol!',\n                    usage: 'cd <directory>',\n                    fn: (...args) => {\n                        if (args.length===1 && args[0]==='..') {\n                            if (prompt === 'anon@romedius:~$ ') {\n                                return 'cannot go up'\n                            } else {\n                                setPrompt(prompt.substring(0, prompt.lastIndexOf('/'))+\":~$ \")\n                                sethome(prompt.substring(prompt.lastIndexOf('/', prompt.lastIndexOf('/')-1)+1, prompt.lastIndexOf('/')))\n                                //console.log(prompt.substring(prompt.lastIndexOf('/', prompt.lastIndexOf('/')-1)+1, prompt.lastIndexOf('/')))\n                                //console.log(prompt.lastIndexOf('/', prompt.lastIndexOf('/')-1))\n                                //console.log(prompt.lastIndexOf('/'))\n                                return 'changed directory'\n                            }\n                        } else {\n                            if (dir[home].includes(args[0])) {\n                                setPrompt(`${prompt.slice(0, -4)+ \"/\" + args.join('/') + \":~$ \"}`)\n                                sethome(args.join('/'))\n                                //console.log(prompt.slice(0, -4)+ \"/\" + args.join('/'))\n                                return 'changed directory'\n                            } else {\n                                return 'cannot find directory'\n                            }\n                        }\n                        \n                    }\n                },\n                ls: {\n                    description: 'List files in the current directory',\n                    usage: 'ls',\n                    fn: () => {\n                        if (dir[home].length === 0) {\n                            return 'nothing here :(\\nUse mkdir to create a dir inside this one.'\n                        } else {\n                            return dir[home].join('\\n')\n                        }\n                    }\n\n                },\n                mkdir: {\n                    description: 'Make a directory',\n                    usage: 'mkdir <directory>',\n                    fn: (...args) => {\n                        if (args.length===1) {\n                            setdir({\n                                ...dir,\n                                [home]: [...dir[home], args[0]],\n                                [args[0]]:[]\n                            })\n                            //console.log(dir)\n                            return `created directory ${args[0]}.`\n                        } else {\n                            return 'invalid arguments'\n                        }\n                    }\n                },\n                help: {\n                    description: 'List all available commands',\n                    usage: 'help',\n                    fn: () => {\n                        return `\n                            ${Object.keys(owrs).map(cmd => `${cmd}${\" \".repeat(12-cmd.length)} | ${owrs[cmd].description}${\" \".repeat(39-owrs[cmd].description.length)} | ${owrs[cmd].usage}`).join('\\n')}\n                            ${Object.keys(cmds).map(cmd => `${cmd}${\" \".repeat(12-cmd.length)} | ${cmds[cmd].description}${\" \".repeat(39-cmds[cmd].description.length)} | ${cmds[cmd].usage}`).join('\\n')}\n                        `\n                    }\n                },\n                ...cmds\n            }}\n            promptLabel={prompt} \n            autoFocus\n            style={{\n                backgroundColor:null,\n                minHeight: null,\n                maxHeight: null,\n                overflow: 'auto',\n                height: '100%',\n                width: '100%',     \n            }}\n            styleEchoBack='fullInherit'\n            contentStyle={{ color: '#ffb86c' , fontWeight: 'normal', paddingLeft: null}} // Text colour\n            promptLabelStyle={{ color: '#ff5555' , fontWeight:'normal'}} // Prompt label colour\n            inputTextStyle={{ color: '#f1fa8c' , fontWeight: 'normal'}}\n            messageStyle={{ color: '#8be9fd' , fontWeight: 'normal', paddingLeft: null}}\n            scrollBehavior='auto'\n            noDefaults\n        />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}